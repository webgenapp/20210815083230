{"version":3,"sources":["api.ts","meetings/MeetingForm.tsx","meetings/CreateMeeting.tsx","meetings/ListMeeting.tsx","meetings/DetailMeeting.tsx","meetings/UpdateMeeting.tsx","fruits/FruitForm.tsx","fruits/CreateFruit.tsx","fruits/ListFruit.tsx","fruits/DetailFruit.tsx","fruits/UpdateFruit.tsx","users/UserForm.tsx","users/CreateUser.tsx","users/ListUser.tsx","users/DetailUser.tsx","users/UpdateUser.tsx","auth/LoginForm.tsx","auth/RegisterForm.tsx","App.tsx","index.tsx"],"names":["CSRF_TOKEN_NAME","CSRF_HEADER_NAME","cookie","name","document","split","find","entry","client","axios","create","headers","value","reduce","MeetingForm","meeting","onSubmit","initialValues","validate","isSubmitting","type","placeholder","disabled","CreateMeeting","queryClient","useQueryClient","history","useHistory","createMeeting","useMutation","values","post","onSuccess","invalidateQueries","setSubmitting","mutate","push","MeetingPreview","handleEdit","handleDelete","handleDetail","onClick","ListMeetings","meetingsQuery","useQuery","get","then","response","data","deleteMeeting","id","delete","length","map","DetailMeeting","useParams","isLoading","UpdateMeeting","updateMeeting","put","FruitForm","fruit","CreateFruit","createFruit","FruitPreview","ListFruits","fruitsQuery","deleteFruit","DetailFruit","UpdateFruit","updateFruit","UserForm","user","username","passwordHash","CreateUser","createUser","UserPreview","ListUsers","usersQuery","deleteUser","DetailUser","UpdateUser","updateUser","Login","useState","error","setError","handleError","message","handleSubmit","a","password","Register","api","email","passwordConfirm","App","retry","useEffect","defaults","catch","console","warn","className","to","path","component","ListMeeting","ListFruit","ListUser","LoginForm","RegisterForm","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","getElementById"],"mappings":"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","file":"static/js/main.c8c13c0a.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst CSRF_TOKEN_NAME = 'csrf-token'\nconst CSRF_HEADER_NAME = 'CSRF-Token'\n\n/**\n * cookie\n * Returns the value of the first cookie matching name `name`\n * or undefined.\n */\nexport function cookie(name: string): string | undefined {\n  // Inspired from\n  // https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie#example_2_get_a_sample_cookie_named_test2\n  return document.cookie\n    .split('; ')\n    .find((entry) => entry?.split('=')[0] === name)\n    ?.split('=')[1]\n}\n\nexport function hasCSRFToken() {\n  return cookie(CSRF_TOKEN_NAME)\n}\n\nexport function fetchCSRFToken() {\n  client\n    .get('/auth/csrf')\n    .then(() => {\n      client.defaults.headers[CSRF_HEADER_NAME] = cookie(CSRF_TOKEN_NAME)\n    })\n    .catch((error) => {\n      console.warn('Received error while fetching CSRF token :', error)\n    })\n}\n\ntype HeaderEntry = {\n  [name: string]: string\n}\n\nconst client = axios.create({\n  headers: [\n    {\n      name: CSRF_HEADER_NAME,\n      value: cookie(CSRF_TOKEN_NAME),\n    },\n  ].reduce<HeaderEntry>((headers, entry) => {\n    if (entry.value) {\n      headers[entry.name] = entry.value\n    }\n    return headers\n  }, {}),\n})\n\nexport default client\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Meeting } from '../types'\n\ntype CreateProps = {\n  meeting?: Meeting\n  onSubmit: (values: Meeting, helpers: FormikHelpers<Meeting>) => void\n}\n\nfunction MeetingForm({ meeting, onSubmit }: CreateProps) {\n  const initialValues: Meeting = {\n    name: meeting ? meeting.name : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='name' placeholder='Name' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default MeetingForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Meeting, MeetingError } from '../types'\nimport MeetingForm from './MeetingForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateMeeting() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createMeeting = useMutation<Meeting, MeetingError, Meeting>(\n    (values) => {\n      return client.post('/api/v1/meetings', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('meetings')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: Meeting,\n    { setSubmitting }: FormikHelpers<Meeting>\n  ) => {\n    createMeeting.mutate(values)\n    setSubmitting?.(false)\n    history.push('/meetings')\n  }\n\n  return <MeetingForm onSubmit={handleSubmit} />\n}\n\nexport default CreateMeeting\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { Meeting } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype MeetingPreviewProps = {\n  meeting: Meeting\n  handleEdit: (meeting: Meeting) => void\n  handleDelete: (meeting: Meeting) => void\n  handleDetail: (meeting: Meeting) => void\n}\n\nfunction MeetingPreview({\n  meeting,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: MeetingPreviewProps) {\n  return (\n    <>\n      {meeting.name}\n      <br />\n      <button type='button' onClick={() => handleDetail(meeting)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(meeting)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(meeting)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListMeetings() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const meetingsQuery = useQuery<Meeting[]>('meetings', () => {\n    return client\n      .get('/api/v1/meetings')\n      .then((response) => response.data) as Promise<Meeting[]>\n  })\n\n  const deleteMeeting = useMutation<any, any, Partial<Meeting>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/meetings/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('meetings')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Meeting) => {\n    history.push(`/meetings/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Meeting) => {\n    deleteMeeting.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Meeting) => {\n    history.push(`/meetings/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{meetingsQuery.data?.length} meetings</p>\n      <ul>\n        {meetingsQuery.data?.map((meeting) => (\n          <li key={meeting.id}>\n            <MeetingPreview\n              meeting={meeting}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListMeetings\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { Meeting } from '../types'\n\nfunction DetailMeeting() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Meeting>(['meetings', id], () =>\n    client.get(`/api/v1/meetings/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const meeting = data as Meeting\n\n  return (\n    <div>\n      <label>{meeting.name}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailMeeting\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport MeetingForm from './MeetingForm'\nimport { Meeting } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateMeeting() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Meeting>(['meetings', id], () =>\n    client.get(`/api/v1/meetings/${id}`).then((response) => response.data)\n  )\n\n  const updateMeeting = useMutation<Meeting, any, Meeting>(\n    (values: Meeting) =>\n      client\n        .put(`/api/v1/meetings/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('meetings')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const meeting = data as Meeting\n  return (\n    <MeetingForm\n      meeting={meeting}\n      onSubmit={(values, { setSubmitting }) => {\n        updateMeeting.mutate(values)\n        setSubmitting?.(false)\n        history.push('/meetings')\n      }}\n    />\n  )\n}\n\nexport default UpdateMeeting\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Fruit } from '../types'\n\ntype CreateProps = {\n  fruit?: Fruit\n  onSubmit: (values: Fruit, helpers: FormikHelpers<Fruit>) => void\n}\n\nfunction FruitForm({ fruit, onSubmit }: CreateProps) {\n  const initialValues: Fruit = {\n    name: fruit ? fruit.name : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='name' placeholder='Name' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default FruitForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Fruit, FruitError } from '../types'\nimport FruitForm from './FruitForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateFruit() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createFruit = useMutation<Fruit, FruitError, Fruit>(\n    (values) => {\n      return client.post('/api/v1/fruits', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('fruits')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: Fruit,\n    { setSubmitting }: FormikHelpers<Fruit>\n  ) => {\n    createFruit.mutate(values)\n    setSubmitting?.(false)\n    history.push('/fruits')\n  }\n\n  return <FruitForm onSubmit={handleSubmit} />\n}\n\nexport default CreateFruit\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { Fruit } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype FruitPreviewProps = {\n  fruit: Fruit\n  handleEdit: (fruit: Fruit) => void\n  handleDelete: (fruit: Fruit) => void\n  handleDetail: (fruit: Fruit) => void\n}\n\nfunction FruitPreview({\n  fruit,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: FruitPreviewProps) {\n  return (\n    <>\n      {fruit.name}\n      <br />\n      <button type='button' onClick={() => handleDetail(fruit)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(fruit)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(fruit)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListFruits() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const fruitsQuery = useQuery<Fruit[]>('fruits', () => {\n    return client\n      .get('/api/v1/fruits')\n      .then((response) => response.data) as Promise<Fruit[]>\n  })\n\n  const deleteFruit = useMutation<any, any, Partial<Fruit>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/fruits/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('fruits')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Fruit) => {\n    history.push(`/fruits/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Fruit) => {\n    deleteFruit.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Fruit) => {\n    history.push(`/fruits/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{fruitsQuery.data?.length} fruits</p>\n      <ul>\n        {fruitsQuery.data?.map((fruit) => (\n          <li key={fruit.id}>\n            <FruitPreview\n              fruit={fruit}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListFruits\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { Fruit } from '../types'\n\nfunction DetailFruit() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Fruit>(['fruits', id], () =>\n    client.get(`/api/v1/fruits/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const fruit = data as Fruit\n\n  return (\n    <div>\n      <label>{fruit.name}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailFruit\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport FruitForm from './FruitForm'\nimport { Fruit } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateFruit() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Fruit>(['fruits', id], () =>\n    client.get(`/api/v1/fruits/${id}`).then((response) => response.data)\n  )\n\n  const updateFruit = useMutation<Fruit, any, Fruit>(\n    (values: Fruit) =>\n      client\n        .put(`/api/v1/fruits/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('fruits')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const fruit = data as Fruit\n  return (\n    <FruitForm\n      fruit={fruit}\n      onSubmit={(values, { setSubmitting }) => {\n        updateFruit.mutate(values)\n        setSubmitting?.(false)\n        history.push('/fruits')\n      }}\n    />\n  )\n}\n\nexport default UpdateFruit\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { User } from '../types'\n\ntype CreateProps = {\n  user?: User\n  onSubmit: (values: User, helpers: FormikHelpers<User>) => void\n}\n\nfunction UserForm({ user, onSubmit }: CreateProps) {\n  const initialValues: User = {\n    username: user ? user.username : '',\n    passwordHash: user ? user.passwordHash : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n\n          <Field type='text' name='passwordHash' placeholder='PasswordHash' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default UserForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { User, UserError } from '../types'\nimport UserForm from './UserForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateUser() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createUser = useMutation<User, UserError, User>(\n    (values) => {\n      return client.post('/api/v1/users', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: User,\n    { setSubmitting }: FormikHelpers<User>\n  ) => {\n    createUser.mutate(values)\n    setSubmitting?.(false)\n    history.push('/users')\n  }\n\n  return <UserForm onSubmit={handleSubmit} />\n}\n\nexport default CreateUser\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { User } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype UserPreviewProps = {\n  user: User\n  handleEdit: (user: User) => void\n  handleDelete: (user: User) => void\n  handleDetail: (user: User) => void\n}\n\nfunction UserPreview({\n  user,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: UserPreviewProps) {\n  return (\n    <>\n      {user.username}\n      <br />\n      <button type='button' onClick={() => handleDetail(user)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(user)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(user)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListUsers() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const usersQuery = useQuery<User[]>('users', () => {\n    return client\n      .get('/api/v1/users')\n      .then((response) => response.data) as Promise<User[]>\n  })\n\n  const deleteUser = useMutation<any, any, Partial<User>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/users/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: User) => {\n    history.push(`/users/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: User) => {\n    deleteUser.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: User) => {\n    history.push(`/users/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{usersQuery.data?.length} users</p>\n      <ul>\n        {usersQuery.data?.map((user) => (\n          <li key={user.id}>\n            <UserPreview\n              user={user}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListUsers\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { User } from '../types'\n\nfunction DetailUser() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<User>(['users', id], () =>\n    client.get(`/api/v1/users/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const user = data as User\n\n  return (\n    <div>\n      <label>{user.username}</label>\n      <br />\n\n      <label>{user.passwordHash}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailUser\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport UserForm from './UserForm'\nimport { User } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateUser() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<User>(['users', id], () =>\n    client.get(`/api/v1/users/${id}`).then((response) => response.data)\n  )\n\n  const updateUser = useMutation<User, any, User>(\n    (values: User) =>\n      client\n        .put(`/api/v1/users/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const user = data as User\n  return (\n    <UserForm\n      user={user}\n      onSubmit={(values, { setSubmitting }) => {\n        updateUser.mutate(values)\n        setSubmitting?.(false)\n        history.push('/users')\n      }}\n    />\n  )\n}\n\nexport default UpdateUser\n","import React, { useState } from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\n\nimport { LoginValues } from '../types'\nimport client from '../api'\nimport { useHistory } from 'react-router-dom'\nimport { useQueryClient } from 'react-query'\n\nfunction Login() {\n  const [error, setError] = useState<string>('')\n  const history = useHistory()\n  const queryClient = useQueryClient()\n\n  const initialValues: LoginValues = {\n    username: '',\n    password: '',\n  }\n\n  const handleError = (\n    error: any,\n    { setSubmitting }: Partial<FormikHelpers<LoginValues>>\n  ) => {\n    if (error.response && error.response.data) {\n      const { error: message } = error.response.data\n      message && setError(message)\n    }\n    setSubmitting?.(false)\n  }\n\n  const handleSubmit = async (\n    values: LoginValues,\n    { setSubmitting }: FormikHelpers<LoginValues>\n  ) => {\n    try {\n      await client.post('/auth/login', values)\n      setSubmitting?.(false)\n      await queryClient.invalidateQueries('user')\n      history.push('/')\n    } catch (error) {\n      handleError(error, { setSubmitting })\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n          <Field type='password' name='password' placeholder='Password' />\n          {error && <div>{error}</div>}\n          <button type='submit' disabled={isSubmitting}>\n            Login\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default Login\n","import React, { useState } from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { RegisterValues } from '../types'\nimport api from '../api'\n\nfunction Register() {\n  const [error, setError] = useState<string>('')\n\n  const initialValues: RegisterValues = {\n    username: '',\n    email: '',\n    password: '',\n    passwordConfirm: '',\n  }\n\n  const handleSubmit = async (\n    values: RegisterValues,\n    { setSubmitting }: FormikHelpers<RegisterValues>\n  ) => {\n    try {\n      await api.post('/auth/register', values)\n      setSubmitting?.(false)\n    } catch (error) {\n      if (error.response && error.response.data) {\n        const { error: message } = error.response.data\n        message && setError(message)\n      }\n      setSubmitting?.(false)\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n          <Field type='text' name='email' placeholder='Email' />\n          <Field type='password' name='password' placeholder='Password' />\n          <Field\n            type='password'\n            name='passwordConfirm'\n            placeholder='Confirm password'\n          />\n          {error && <div>{error}</div>}\n          <button type='submit' disabled={isSubmitting}>\n            Register\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default Register\n","import React, { useEffect } from 'react'\n\nimport CreateMeeting from './meetings/CreateMeeting'\nimport ListMeeting from './meetings/ListMeeting'\nimport DetailMeeting from './meetings/DetailMeeting'\nimport UpdateMeeting from './meetings/UpdateMeeting'\n\nimport CreateFruit from './fruits/CreateFruit'\nimport ListFruit from './fruits/ListFruit'\nimport DetailFruit from './fruits/DetailFruit'\nimport UpdateFruit from './fruits/UpdateFruit'\n\nimport CreateUser from './users/CreateUser'\nimport ListUser from './users/ListUser'\nimport DetailUser from './users/DetailUser'\nimport UpdateUser from './users/UpdateUser'\n\nimport LoginForm from './auth/LoginForm'\nimport RegisterForm from './auth/RegisterForm'\n\nimport { Route, Switch, BrowserRouter as Router, Link } from 'react-router-dom'\n\nimport { useQuery } from 'react-query'\n\nimport client, { fetchCSRFToken, hasCSRFToken } from './api'\n\nfunction App() {\n  const { data: user } = useQuery('user', () => client.get('/auth/me'), {\n    retry: false,\n  })\n\n  useEffect(() => {\n    if (!hasCSRFToken()) fetchCSRFToken()\n  }, [])\n\n  return (\n    <Router>\n      <nav>\n        <ul className='flex'>\n          <li>\n            <Link to='/'>Home</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/login'>Login</Link>\n            <br />\n            <Link to='/register'>Register</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/meetings'>Meetings</Link>\n            <br />\n            <Link to='/meetings/create'>Create a Meeting</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/fruits'>Fruits</Link>\n            <br />\n            <Link to='/fruits/create'>Create a Fruit</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/users'>Users</Link>\n            <br />\n            <Link to='/users/create'>Create a User</Link>\n            <br />\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <Route path='/meetings'>\n          <h1>Meetings</h1>\n        </Route>\n\n        <Route path='/fruits'>\n          <h1>Fruits</h1>\n        </Route>\n\n        <Route path='/users'>\n          <h1>Users</h1>\n        </Route>\n\n        <Switch>\n          {/* Meeting routes */}\n          <Route path='/meetings/create' component={CreateMeeting} />\n          <Route path='/meetings/update/:id' component={UpdateMeeting} />\n          <Route path='/meetings/detail/:id' component={DetailMeeting} />\n          <Route path='/meetings' component={ListMeeting} />,\n          {/* Fruit routes */}\n          <Route path='/fruits/create' component={CreateFruit} />\n          <Route path='/fruits/update/:id' component={UpdateFruit} />\n          <Route path='/fruits/detail/:id' component={DetailFruit} />\n          <Route path='/fruits' component={ListFruit} />,{/* User routes */}\n          <Route path='/users/create' component={CreateUser} />\n          <Route path='/users/update/:id' component={UpdateUser} />\n          <Route path='/users/detail/:id' component={DetailUser} />\n          <Route path='/users' component={ListUser} />\n          {/* auth routes */}\n          <Route path='/login' component={LoginForm} />\n          <Route path='/register' component={RegisterForm} />\n        </Switch>\n      </main>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}